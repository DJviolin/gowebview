// Code generated by go-bindata.
// sources:
// res/app/index.html
// res/bootstrap/css/bootstrap.min.css
// res/bootstrap/fonts/glyphicons-halflings-regular.eot
// res/bootstrap/fonts/glyphicons-halflings-regular.svg
// res/bootstrap/fonts/glyphicons-halflings-regular.ttf
// res/bootstrap/fonts/glyphicons-halflings-regular.woff
// res/bootstrap/fonts/glyphicons-halflings-regular.woff2
// res/bootstrap/js/bootstrap.js
// res/bootstrap/js/bootstrap.min.js
// res/bootstrap/js/npm.js
// res/jquery/jquery.min.js
// res/react/JSXTransformer.js
// res/react/react.js
// res/react/react.min.js
// DO NOT EDIT!

package todoapp

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// appIndexHtml reads file data from disk. It returns an error on failure.
func appIndexHtml() (*asset, error) {
	path := "/home/srinath/src/github.com/srinathh/mobilehtml5app/example/todoapp/res/app/index.html"
	name := "app/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bootstrapCssBootstrapMinCss reads file data from disk. It returns an error on failure.
func bootstrapCssBootstrapMinCss() (*asset, error) {
	path := "/home/srinath/src/github.com/srinathh/mobilehtml5app/example/todoapp/res/bootstrap/css/bootstrap.min.css"
	name := "bootstrap/css/bootstrap.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bootstrapFontsGlyphiconsHalflingsRegularEot reads file data from disk. It returns an error on failure.
func bootstrapFontsGlyphiconsHalflingsRegularEot() (*asset, error) {
	path := "/home/srinath/src/github.com/srinathh/mobilehtml5app/example/todoapp/res/bootstrap/fonts/glyphicons-halflings-regular.eot"
	name := "bootstrap/fonts/glyphicons-halflings-regular.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bootstrapFontsGlyphiconsHalflingsRegularSvg reads file data from disk. It returns an error on failure.
func bootstrapFontsGlyphiconsHalflingsRegularSvg() (*asset, error) {
	path := "/home/srinath/src/github.com/srinathh/mobilehtml5app/example/todoapp/res/bootstrap/fonts/glyphicons-halflings-regular.svg"
	name := "bootstrap/fonts/glyphicons-halflings-regular.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bootstrapFontsGlyphiconsHalflingsRegularTtf reads file data from disk. It returns an error on failure.
func bootstrapFontsGlyphiconsHalflingsRegularTtf() (*asset, error) {
	path := "/home/srinath/src/github.com/srinathh/mobilehtml5app/example/todoapp/res/bootstrap/fonts/glyphicons-halflings-regular.ttf"
	name := "bootstrap/fonts/glyphicons-halflings-regular.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bootstrapFontsGlyphiconsHalflingsRegularWoff reads file data from disk. It returns an error on failure.
func bootstrapFontsGlyphiconsHalflingsRegularWoff() (*asset, error) {
	path := "/home/srinath/src/github.com/srinathh/mobilehtml5app/example/todoapp/res/bootstrap/fonts/glyphicons-halflings-regular.woff"
	name := "bootstrap/fonts/glyphicons-halflings-regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bootstrapFontsGlyphiconsHalflingsRegularWoff2 reads file data from disk. It returns an error on failure.
func bootstrapFontsGlyphiconsHalflingsRegularWoff2() (*asset, error) {
	path := "/home/srinath/src/github.com/srinathh/mobilehtml5app/example/todoapp/res/bootstrap/fonts/glyphicons-halflings-regular.woff2"
	name := "bootstrap/fonts/glyphicons-halflings-regular.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bootstrapJsBootstrapJs reads file data from disk. It returns an error on failure.
func bootstrapJsBootstrapJs() (*asset, error) {
	path := "/home/srinath/src/github.com/srinathh/mobilehtml5app/example/todoapp/res/bootstrap/js/bootstrap.js"
	name := "bootstrap/js/bootstrap.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bootstrapJsBootstrapMinJs reads file data from disk. It returns an error on failure.
func bootstrapJsBootstrapMinJs() (*asset, error) {
	path := "/home/srinath/src/github.com/srinathh/mobilehtml5app/example/todoapp/res/bootstrap/js/bootstrap.min.js"
	name := "bootstrap/js/bootstrap.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bootstrapJsNpmJs reads file data from disk. It returns an error on failure.
func bootstrapJsNpmJs() (*asset, error) {
	path := "/home/srinath/src/github.com/srinathh/mobilehtml5app/example/todoapp/res/bootstrap/js/npm.js"
	name := "bootstrap/js/npm.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jqueryJqueryMinJs reads file data from disk. It returns an error on failure.
func jqueryJqueryMinJs() (*asset, error) {
	path := "/home/srinath/src/github.com/srinathh/mobilehtml5app/example/todoapp/res/jquery/jquery.min.js"
	name := "jquery/jquery.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// reactJsxtransformerJs reads file data from disk. It returns an error on failure.
func reactJsxtransformerJs() (*asset, error) {
	path := "/home/srinath/src/github.com/srinathh/mobilehtml5app/example/todoapp/res/react/JSXTransformer.js"
	name := "react/JSXTransformer.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// reactReactJs reads file data from disk. It returns an error on failure.
func reactReactJs() (*asset, error) {
	path := "/home/srinath/src/github.com/srinathh/mobilehtml5app/example/todoapp/res/react/react.js"
	name := "react/react.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// reactReactMinJs reads file data from disk. It returns an error on failure.
func reactReactMinJs() (*asset, error) {
	path := "/home/srinath/src/github.com/srinathh/mobilehtml5app/example/todoapp/res/react/react.min.js"
	name := "react/react.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"app/index.html":                                     appIndexHtml,
	"bootstrap/css/bootstrap.min.css":                    bootstrapCssBootstrapMinCss,
	"bootstrap/fonts/glyphicons-halflings-regular.eot":   bootstrapFontsGlyphiconsHalflingsRegularEot,
	"bootstrap/fonts/glyphicons-halflings-regular.svg":   bootstrapFontsGlyphiconsHalflingsRegularSvg,
	"bootstrap/fonts/glyphicons-halflings-regular.ttf":   bootstrapFontsGlyphiconsHalflingsRegularTtf,
	"bootstrap/fonts/glyphicons-halflings-regular.woff":  bootstrapFontsGlyphiconsHalflingsRegularWoff,
	"bootstrap/fonts/glyphicons-halflings-regular.woff2": bootstrapFontsGlyphiconsHalflingsRegularWoff2,
	"bootstrap/js/bootstrap.js":                          bootstrapJsBootstrapJs,
	"bootstrap/js/bootstrap.min.js":                      bootstrapJsBootstrapMinJs,
	"bootstrap/js/npm.js":                                bootstrapJsNpmJs,
	"jquery/jquery.min.js":                               jqueryJqueryMinJs,
	"react/JSXTransformer.js":                            reactJsxtransformerJs,
	"react/react.js":                                     reactReactJs,
	"react/react.min.js":                                 reactReactMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"app": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{appIndexHtml, map[string]*bintree{}},
	}},
	"bootstrap": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"bootstrap.min.css": &bintree{bootstrapCssBootstrapMinCss, map[string]*bintree{}},
		}},
		"fonts": &bintree{nil, map[string]*bintree{
			"glyphicons-halflings-regular.eot":   &bintree{bootstrapFontsGlyphiconsHalflingsRegularEot, map[string]*bintree{}},
			"glyphicons-halflings-regular.svg":   &bintree{bootstrapFontsGlyphiconsHalflingsRegularSvg, map[string]*bintree{}},
			"glyphicons-halflings-regular.ttf":   &bintree{bootstrapFontsGlyphiconsHalflingsRegularTtf, map[string]*bintree{}},
			"glyphicons-halflings-regular.woff":  &bintree{bootstrapFontsGlyphiconsHalflingsRegularWoff, map[string]*bintree{}},
			"glyphicons-halflings-regular.woff2": &bintree{bootstrapFontsGlyphiconsHalflingsRegularWoff2, map[string]*bintree{}},
		}},
		"js": &bintree{nil, map[string]*bintree{
			"bootstrap.js":     &bintree{bootstrapJsBootstrapJs, map[string]*bintree{}},
			"bootstrap.min.js": &bintree{bootstrapJsBootstrapMinJs, map[string]*bintree{}},
			"npm.js":           &bintree{bootstrapJsNpmJs, map[string]*bintree{}},
		}},
	}},
	"jquery": &bintree{nil, map[string]*bintree{
		"jquery.min.js": &bintree{jqueryJqueryMinJs, map[string]*bintree{}},
	}},
	"react": &bintree{nil, map[string]*bintree{
		"JSXTransformer.js": &bintree{reactJsxtransformerJs, map[string]*bintree{}},
		"react.js":          &bintree{reactReactJs, map[string]*bintree{}},
		"react.min.js":      &bintree{reactReactMinJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
